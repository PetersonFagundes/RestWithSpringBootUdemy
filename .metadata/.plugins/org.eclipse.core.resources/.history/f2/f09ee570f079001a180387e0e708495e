package br.com.erudio;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.erudio.exception.UnsuportedMathOperationException;

@RestController
public class MathController {
	
	//Especificando o método get com path variable para obrigar vir com valor
	@RequestMapping(value="/sum/{numberOne}/{numberTwo}", method=RequestMethod.GET)
	public Double sum(@PathVariable("numberOne") String numberOne, @PathVariable("numberTwo") String numberTwo) throws Exception {
		if(!isNumeric(numberOne) || !isNumeric(numberTwo))
		{
			throw new UnsuportedMathOperationException("Please set a numeric value!");
		}
		
		Double sum = convertToDouble(numberOne) + convertToDouble(numberTwo);
		return sum;
	}
	
	//Especificando o método get com path variable para obrigar vir com valor
	@RequestMapping(value="/sub/{numberOne}/{numberTwo}", method=RequestMethod.GET)
	public Double sub(@PathVariable("numberOne") String numberOne, @PathVariable("numberTwo") String numberTwo) throws Exception {
		if(!isNumeric(numberOne) || !isNumeric(numberTwo))
		{
			throw new UnsuportedMathOperationException("Please set a numeric value!");
		}
		
		Double sub = convertToDouble(numberOne) - convertToDouble(numberTwo);
		return sub;
	}
	
	//Especificando o método get com path variable para obrigar vir com valor
	@RequestMapping(value="/multiplication/{numberOne}/{numberTwo}", method=RequestMethod.GET)
	public Double multiplication(@PathVariable("numberOne") String numberOne, @PathVariable("numberTwo") String numberTwo) throws Exception {
		if(!isNumeric(numberOne) || !isNumeric(numberTwo))
		{
			throw new UnsuportedMathOperationException("Please set a numeric value!");
		}
		
		Double result = convertToDouble(numberOne) * convertToDouble(numberTwo);
		return result;
	}

	//Especificando o método get com path variable para obrigar vir com valor
	@RequestMapping(value="/division/{numberOne}/{numberTwo}", method=RequestMethod.GET)
	public Double division(@PathVariable("numberOne") String numberOne, @PathVariable("numberTwo") String numberTwo) throws Exception {
		if(!isNumeric(numberOne) || !isNumeric(numberTwo))
		{
			throw new UnsuportedMathOperationException("Please set a numeric value!");
		}
		
		if(convertToDouble(numberTwo) == 0)
		{
			throw new UnsuportedMathOperationException("Please set a denominator different of zero! ");
		}
		
		Double result = convertToDouble(numberOne) / convertToDouble(numberTwo);
		return result;
	}
	
	//Especificando o método get com path variable para obrigar vir com valor
	@RequestMapping(value="/mean/{numberOne}/{numberTwo}", method=RequestMethod.GET)
	public Double mean(@PathVariable("numberOne") String numberOne, @PathVariable("numberTwo") String numberTwo) throws Exception {
		if(!isNumeric(numberOne) || !isNumeric(numberTwo))
		{
			throw new UnsuportedMathOperationException("Please set a numeric value!");
		}
				
		Double result = (convertToDouble(numberOne) + convertToDouble(numberTwo)) / 2.0;
		return result;
	}	
		
	private Double convertToDouble(String strNumber) {
		if(strNumber == null) return 0D;
		
		String number = strNumber.replaceAll(",", ".");

		if(isNumeric(number)) return Double.parseDouble(number);
		
		return 0D;
	}

	private boolean isNumeric(String strNumber) {
		if(strNumber == null) return false;
		String number = strNumber.replaceAll(",", ".");
		
		//Criando regex para verificar se eh um numero
		return number.matches("[-+]?[0-9]*\\.?[0-9]+");
	}
	
	
}
